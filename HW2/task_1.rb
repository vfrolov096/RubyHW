  p '1.Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.' # - Читаем внимательно условие задачи - сначала четные, и только потом нечетные. Лучше использовать методы 'odd?' и 'even?'
  p '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'

  array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

  #array.each_with_index do |e,i| # елементы с четными индексами
  #	puts e if i%2 == 0
  #end

  #parray.each_with_index do |e,i| # елементы с не четными индексами
  #	puts e if i%2 != 0
  #end

  p array.each_with_index {|e,i| puts e if i%2 != 0} # В чате я сбрасывал стайлгайд - отступы не собдюдены
  p array.each_with_index {|e,i| puts e if i%2 == 0} # То же самое и здесь

  p '---------------------------'

  p '2.Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.' # + И снова же, лучше использовать методы 'odd?' и 'even?'
  p '[1, 99, 3, 15, 5, 123]'

  array = [1, 99, 3, 15, 5, 123]

# И снова отступы.
  puts array.each_with_index do |e,i|
  puts e if i%2 != 0
  end

  p array.each_with_index {|e,i| puts e if i%2 == 0}

  p '---------------------------'

  p '3.Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному
   неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].' # +
  p '[1, 99, 3, 15, 5, 123]'

  array = [55, 23, 34, 345, 99]

  puts array.index { |i| array[0] < i && i < array[-1] } || []

  p '---------------------------'

  p '4.Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные.' # +
  p [6, 1, 3, 4, 5, 12, 7, 8, 123, 234]

  array = [6, 1, 3, 4, 5, 12, 7, 8, 123, 234]
  p array.select { |e| e.odd? } + array.select { |e| e.even? }

  p '---------------------------'

  p '5.Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.'
  p '[6, 2, 3, 4, 5, 6, 7, 8, 9, 10]' # + В условии задачи стотит преобразовать массив. Для этого нужно использовать метод 'map!'

  array = [100, 5, 40, 23, 35, 340, 124]
  p array.each { |e,i| puts e += array.first if e%2 == 0 } # Отступы. Зачему ты здесь указываешь аргумент 'i', если он нигде не используется?

  p '---------------------------'

  p '6.Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.' # - Твой код сдвигает элементы влево
  p '[6, -1, 3, 4, 5, -14, 7, 8, 123, 10]'

  array = [6, -1, 3, 4, 5, 12, -7, 8, 123, 10]
  p array.rotate(1)

  p '---------------------------'

  p '7.Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.' # - Твой код сдвигает элементы вправо
  p '[6, -1, 3, 4, 5, -14, 7, 8, 123, 10]'

  array = [6, -1, 3, 4, 5, 12, -7, 8, 123, 10]
  p array.rotate(-1)

  p '---------------------------'

  p '8.Дан целочисленный массив. Упорядочить его по возрастанию.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.sort!

  p '---------------------------'

  p '9.Дан целочисленный массив. Упорядочить его по убыванию.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.sort!.reverse

  # array.sort_by { |e| -e }
  # array.sort {|x,y| -(x <=> y)}

  p '---------------------------'

  p '10.Дан целочисленный массив. Найти индекс минимального элемента.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.index(array.min)

  p '---------------------------'

  p '11.Дан целочисленный массив. Найти индекс максимального элемента.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.index(array.max)

  p '---------------------------'

  p '12.Дан целочисленный массив. Найти индекс первого минимального элемента.' # - В условии задачи сказанно, что нужно найти только индекс, у тебя же выводится массив, содержащий в себе элемент и его индекс.
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.each_with_index.min

  p '---------------------------'

  p '13.Дан целочисленный массив. Найти индекс первого максимального элемента.' # - В условии задачи сказанно, что нужно найти только индекс, у тебя же выводится массив, содержащий в себе элемент и его индекс.
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.each_with_index.max

  p '---------------------------'

  p '14.Дан целочисленный массив. Найти индекс последнего минимального элемента.' # - В условии задачи сказанно, что нужно найти только индекс, у тебя же выводится массив, содержащий в себе элемент и его индекс.
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.each_with_index.min

  p '---------------------------'

  p '15.Дан целочисленный массив. Найти все четные элементы' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.even? }

  p '---------------------------'

  p '16.Дан целочисленный массив. Найти все нечетные элементы' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.odd? }

  p '---------------------------'

  p '17.Дан целочисленный массив. Найти количество четных элементов.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.even? }.size

  p '---------------------------'

  p '18.Дан целочисленный массив. Найти количество нечетных элементов.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.odd? }.size

  p '---------------------------'

  p '19.Дан целочисленный массив. Найти минимальный четный элемент.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.even? }.min

  p '---------------------------'

  p '20.Дан целочисленный массив. Найти минимальный нечетный элемент.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.odd? }.min

  p '---------------------------'

  p '21.Дан целочисленный массив. Найти максимальный четный элемент.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.even? }.max

  p '---------------------------'

  p '22.Дан целочисленный массив.  Найти максимальный нечетный элемент.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e.odd? }.max

  p '---------------------------'

  p '23.Дан целочисленный массив.  Найти минимальный положительный элемент.' # + Но лучше использовать метод 'positive?'
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e > 0 }.min

  p '---------------------------'

  p '24.Дан целочисленный массив.  Найти максимальный отрицательный элемент.' # + Но лучше использовать метод 'negative?'
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.select { |e| e < 0 }.min

  p '---------------------------'

  p '25.Дан целочисленный массив. Найти количество минимальных элементов.' # +
  p '[6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]'

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200, -200]
  p array.count { |i| i == array.min }

  p '---------------------------'

  p '26.Дан целочисленный массив. Найти количество максимальных элементов.' # +

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 123, 123, 10, -200, -200]
  p array.count { |i| i == array.max }

  p '---------------------------'

  p '27.Дан целочисленный массив. Найти два наименьших элемента.' # + Тебе не нужно использовать здесь 'sort' и 'uniq'. Достаточно будет array.min(2)
  p array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.sort.uniq.min 2

  p '---------------------------'

  p '28.Дан целочисленный массив. Найти два наибольших элемента.' # + Тебе не нужно использовать здесь 'sort' и 'uniq'. Достаточно будет array.max(2)

  array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]

  p array = [6, -1, 3, 4, 5, -12, -7, 8, 123, 10, -200]
  p array.sort.uniq.max 2

  p '---------------------------'

  p '29.Дан целочисленный массив. Найти среднее арифметическое его элементов.' # - В данном случае метод 'to_f' преобразует только результат. Что у тебя выведет в результате деления '(10 / 9).to_f'?

  p '[6, 1, 3, 4, 5, 12, 7, 8, 123, 234]'

  array = [6, 1, 3, 4, 5, 12, 7, 8, 123, 234]
  p average = (array.sum / array.size).to_f

  p '---------------------------'


  p '30.Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные.' # +
  p '[6, 1, 3, 4, 5, 12, 7, 8, 123, 234]'

  array = [6, 1, 3, 4, 5, 12, 7, 8, 123, 234]
  p array.select { |e| e.even? } + array.select { |e| e.odd? }

  p '---------------------------'


  p '31.Дан целочисленный массив. Вывести индексы элементов, которые меньше своего левого соседа, и количество таких чисел.' # +

  array = [6, 1, 3, 4, 5, 12, 5, 8, 123, 234]
  p var = (1... array.size).select{ |i| array[i] < array[i-1] } # Отступы
  p var, var.size

  p '---------------------------'

  p '32.Дан целочисленный массив. Найти количество элементов, расположенных после последнего максимального.' # +

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]
  p array.reverse.index(array.max)

  p '---------------------------'

  p '33.Дан целочисленный массив. Найти количество элементов, расположенных после последнего минимального.' # +

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]
  p array.reverse.index(array.min)

  p '---------------------------'

  p '34.Дан целочисленный массив. Заменить все положительные элементы на значение минимального.' # + Можно использовать метод 'positive?'

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]

  def positive_to_min(array)
    min = array.min
    array.map { |n| n > 0 ? min : n }
  end
  p positive_to_min(array)

  p '---------------------------'

  p '34.Дан целочисленный массив. Заменить все положительные элементы на значение максимального.' # + Можно использовать метод 'positive?'

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]

  def positive_to_max(array)
    max = array.max
    array.map { |n| n > 0 ? max : n }
  end
  p positive_to_max(array)

  p '---------------------------'

  p '35.Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.' # + Можно использовать метод 'negative?'

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]

  def neg_to_min(array)
    min = array.min
    array.map { |n| n < 0 ? min : n }
  end
  p neg_to_min(array)

  p '---------------------------'

  p '35.Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.' # + Можно использовать метод 'negative?'

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]

  def neg_to_max(array)
    max = array.max
    array.map { |n| n < 0 ? max : n }
  end
  p neg_to_max(array)

  p '---------------------------'

  p '36.Дан целочисленный массив. Найти количество его локальных максимумов.' # +

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]
    p( (1..array.size-2).to_a.select{ |i| (array[i] > array[i-1])&&(array[i] > array[i+1]) }.size ) # Отступы

  p '---------------------------'

  p '36.Дан целочисленный массив. Найти количество его локальных минимумов.' # +

  array = [6, 1, -143, 4, 5, -12, 5, 400, 14, -32]

  p( (1..array.size-2).to_a.select{ |i| (array[i] < array[i-1])&&(array[i] < array[i+1]) }.size ) # Отступы

  p '---------------------------'

  p '37.Дан целочисленный массив. Найти количество элементов, между первым и последним максимальным.' # - Код работает неверно. В задаче сказано, что нужно найти количество элементов между первым и последним максимальными элементами. В твоем случае у тебя максимальный элемент - это 12. Их в массиве 3шт. А у тебя считается только количество элементов между первым и вторым максимальным. Результат вывода - 2, а должно быть 6

  array = [1,2,3,12,3,0,12,7,4,7,12,9,6] # Отступы

  fmin = array.index(array.max) # Почему название переменной fmin а не fmax? Ты же здесь максимальное число ищешь. Плюс ко всему, переменные лучше называть понятными именами, например - first_max, second_max
  smin = (array[fmin+1..-1].index(array[fmin+1..-1].max)) + (fmin + 1) # Отступы. Нужно ли здесь столько круглых скобок?
  p array[fmin+1 ... smin].size # Отступы

  p '---------------------------'

  p '37.Дан целочисленный массив. Найти количество элементов, между первым и последним минимальным.' # - То же самое по аналогии с заданием предыдущим заданием.

  array = [1,2,3,12,3,0,12,7,4,7,12,9,6] # Отступы

  fmin = array.index(array.min) # То же самое по поводу названий переменных
  smin = (array[fmin+1..-1].index(array[fmin+1..-1].min)) + (fmin + 1) # Отступы. Нужно ли здесь столько круглых скобок?
  p array[fmin+1 ... smin].size # Отступы

  p '---------------------------'


  p '38.Дан целочисленный массив. Найти индекс первого максимального элемента.' # + Если метод создан просто для понимания как это работает, то ок, но в таких случаях проще обойтись одной строчкой кода без определения метода.

  array = [1,2,3,12,3,8,12,7,4,7,12,9,6] # Где отступы? Почему в одних случаях они есть, а в других нет?

  def max_index(array)
    array.index(array.max)
  end

  puts max_index(array)


  p '---------------------------'

# На сколько я вижу, то сделано всего 42 задачи из 50. Почему не хватило сил еще на 8, ведь сдал ты домашку еще 17го числа, до дэдлайна еще было много времени. Так же был скинут стайлгайд и я просил в общем чате, чтобы вы все поправили свой код относительно него.


  p 'Есть массив [621, 445, 147, 159, 430, 222, 482, 44, 194, 522, 652, 494, 14, 126, 532, 387, 441, 471, 337, 446, 18, 36, 202, 574, 556, 458, 16, 139, 222, 220, 107, 82, 264, 366, 501, 319, 314, 430, 55, 336], сохранить массив в переменную и проделать с ней следующее (должен выводиться результат, но сам массив не менять):'
    

  array = [621, 445, 147, 159, 430, 222, 482, 44, 194, 522, 652, 494, 14, 126, 532, 387, 441, 471, 337, 446, 18, 36, 202, 574, 556, 458, 16, 139, 222, 220, 107, 82, 264, 366, 501, 319, 314, 430, 55, 336]

  p 1. '– узнать количество элементов в массиве;'

    p array.size

  p '---------------------------'

  p 2. '– перевернуть массив;'

    p array.reverse

  p '---------------------------'

  p 3. '– найти наибольшее число;'

    p array.max

  p '---------------------------'

  p 4. '– найти наименьшее число;'

    p array.min

  p '---------------------------'

  p 5. '– отсортировать от меньшего к большему;'

    p array.sort

  p '---------------------------'

  p 6. '– отсортировать от большего к меньшему;'

    p array.sort.reverse

  p '---------------------------'

  p 7. '– удалить все нечетные числа;'

    p array.find_all { |e| e.even? }

  p '---------------------------'

  p 8. '– оставить только те числа, которые без остатка делятся на 3;'

    p array.select { |e| e % 3 == 0 }

  p '---------------------------'

  p 9. '– удалить из массива числа, которые повторяются (то есть, нужно вывести массив, в котором нет повторов);'

    p array.uniq

  p '---------------------------'

  p 10. '– разделить каждый элемент на 10, в результате элементы не должны быть округлены до целого;'

    p array.map { |e| e / 10.to_f }

  p '---------------------------'

  p 11. '– получить новый массив, который бы содержал в себе те буквы английского алфавита, порядковый номер которых есть в нашем массиве;'

      #array_AZ = [a..z]
      

  p '---------------------------'

  p 12. '– поменять местами минимальный и максимальный элементы массива;'

      # a = array.each_with_index.min[1]
      # b = array.each_with_index.max[1]

      # array[a], array[b] = array[b], array[a]

  p '---------------------------'

  p 13. '– найти элементы, которые находятся перед минимальным числом в массиве;'

    p array[0...array.index(array.min)]

  p '---------------------------'
    
  p 14. '– необходимо найти три наименьших элемента.'

    p array.min(3)

  p '---------------------------'






